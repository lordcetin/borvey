generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String      @id @default(uuid())
  fullName String
  image String
  email String @unique
  emailVerified DateTime
  phone String @default("")
  hashedPassword String
  provinceFrom String @default("")
  districtFrom String @default("")

  code String @default("")
  verified Boolean @default(false)

  hash String @default("")
  salt String @default("")

  memberId String
  conversationId String @default("")

  codes SmsCode[]
  offers Offers[]
  firm Firm[]
  gigs Gig[]
  servers Server[]
  members Member[]
  channels Channel[]
  session Session[]
  notification Notification[]

  firmName String @default("")
  firmStatus Boolean @default(false)
  adminStatus String @default("user")

  expires DateTime
  updated DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([email,phone])
}

model Contact {
  id        String      @id @default(uuid())
  fullName String
  email String
  phone String
  message String
  createdAt DateTime @default(now())
}

model Session {
  id        String      @id @default(uuid())
  sessionToken String @unique
  fullName String
  memberId String
  ip String
  city String
  region String
  country String
  postal String
  timezone String
  location String
  expires DateTime

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([profileId])
}

model Notification {
  id       String      @id @default(uuid())
  text String
  createdAt DateTime
  gigId String
  senderId String
  senderName String
  senderImage String
  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])
}

model SmsCode {
  id       String      @id @default(uuid())
  code String
  isUsed Boolean @default(false)

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Spotlight {
  id   String    @id @default(uuid())
  firmName String
  description String
  image String

  createdAt DateTime @default(now())
}

model Gig {
  id       String    @id @default(uuid())
  title String
  description String

  service String
  transportype String

  provinceFrom String
  provinceTo String
  districtFrom String
  districtTo String

  createdAt DateTime @default(now())

  profileId String
  profiles    User    @relation(fields: [profileId], references: [id],onDelete: Cascade)

  comment  Comments[]
  offers  Offers[]

  @@index([profileId])
}

model Offers {
  id      String    @id @default(uuid())
  offerText String
  price String
  time String
  createdAt DateTime @default(now())

  status String @default("no")

  gigId String
  gig    Gig    @relation(fields: [gigId], references: [id],onDelete: Cascade)

  firmId String
  firm    Firm    @relation(fields: [firmId], references: [id],onDelete: Cascade)

  offeredUserId String

  profileId  String  
  profiles User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId,gigId])

}

model Firm {
  id   String    @id @default(uuid())
  firmName String
  firmPhone String
  firmDescription String
  firmLogo String
  verified Boolean @default(false)
  ssnNumber String @default("")
  isSpotlight Boolean @default(false)

  stars String @default("")
  level String @default("1")
  responseRate String @default("")


  profileId String
  profiles User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  offers Offers[]
  commentsa Comments[]

  createdAt DateTime @default(now())
  @@index([profileId])
}

model Comments {
  id      String    @id @default(uuid())
  comment String
  speedRate String
  serviceRate String
  communicationRate String
  createdAt DateTime @default(now())

  gigId String
  gig    Gig    @relation(fields: [gigId], references: [id],onDelete: Cascade)
  senderId  String  

  profileId String
  commentsa Firm   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([senderId,gigId])

}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Server {
  id        String      @id @default(uuid())
  name String
  image String
  inviteCode String @unique @default(uuid())

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id    String    @id @default(uuid())
  name String
  type ChannelType @default(TEXT)
  private Boolean

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id    String @id @default(uuid())
  content String

  fileUrl String? 

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Member {
  id    String  @id @default(uuid())
  role MemberRole @default(GUEST)
  
  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String 
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsRecevied Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId,serverId])
}

model Conversation {
  id    String    @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  lastMessageId String
  lastMessage String
  lastMessageFileUrl String?
  lastMessageCreatedAt DateTime
  lastMessageInspect String
  lastMessageSenderId String

  @@index([memberTwoId])

  @@unique([memberOneId,memberTwoId])
  
}

model DirectMessage {
  id String @id @default(uuid())
  content String
  fileUrl String?

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  inspect String

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])

}